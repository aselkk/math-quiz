{"version":3,"file":"game.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA,8BAA8B,MAAM,EAAE,MAAM;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;ACxDO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpD+C;;AAExC;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,YAAY,+DAAiB;AAC7B;AACA;AACA;AACA,KAAK;AACL;;;;;;;UCnCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNqC;AACM;AACI;;AAExC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,kCAAkC;;AAErG;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,QAAQ,+DAAiB;AACzB,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAU;AAC1B;;AAEA;AACA,qEAAqE;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAAiB;AACjB","sources":["webpack://math-quiz/./src/js/leaderboard.js","webpack://math-quiz/./src/js/modal.js","webpack://math-quiz/./src/js/timer.js","webpack://math-quiz/webpack/bootstrap","webpack://math-quiz/webpack/runtime/define property getters","webpack://math-quiz/webpack/runtime/hasOwnProperty shorthand","webpack://math-quiz/webpack/runtime/make namespace object","webpack://math-quiz/./src/js/game.js"],"sourcesContent":["export const renderLeaderboard = () => {\n    let players = JSON.parse(localStorage.getItem('storagePlayers'))\n    if (!players) return;\n\n    let filteredByName = []\n    players?.forEach((player) => {\n        if (filteredByName.length) {\n            const res = filteredByName.findIndex((item) => item.name === player.name && item.mode === player.mode)\n            if (res >= 0) {\n                if (player.score > filteredByName[res].score) {\n                    filteredByName.splice(res, 1);\n                    filteredByName.push(player);\n                }\n            } else {\n                filteredByName.push(player);\n            }\n        } else {\n            filteredByName.push(player);\n        }\n    })\n\n    const filteredByScore = filteredByName.sort((sameName, filteredByName) => filteredByName.score - sameName.score);\n\n    function renderLeaders(arr) {\n        const select = document.getElementById('select');\n        const value = select.options[select.selectedIndex].value;\n        const listContainer = document.createElement('ol');\n        const listFragment = document.createDocumentFragment();\n        const list = document.querySelector(\".leaders-wrapper\");\n        list.innerHTML = ''\n        function makeElem(arrItem) {\n            const {name, mode, score} = arrItem;\n            let li = document.createElement('li');\n            li.innerHTML = `${name} ${score}`;\n            return li;\n        }\n\n        arr.forEach((item, index) => {\n            try {\n                if(item.mode == value){\n                    const listElement = makeElem(item, index);\n                    listFragment.append(listElement);\n                }\n            } catch (Error) {\n                console.log(Error);\n            }\n        });\n        listContainer.append(listFragment);\n        list.append(listContainer);\n    }\n    \n    document.getElementById('select').addEventListener('change', () => {\n        renderLeaders(filteredByScore)\n    })\n    renderLeaders(filteredByScore);\n}\nrenderLeaderboard()\n","export const initModalToggling = () =>{\n    const openModal = document.querySelector(\".bttn--rules\")\n    const openLeaderboard = document.querySelector(\".bttn--leaderboard\")\n    const openEndModal = document.querySelector(\".bttn--stop\")\n    let modalWindow\n\n    openModal?.addEventListener(\"click\", function () {\n        modalWindow = document.querySelector('.modal-window')\n        hideModalWindow();\n        showModalWindow();\n        initModalEvents()\n    });\n\n    openLeaderboard?.addEventListener(\"click\", function () {\n        modalWindow = document.querySelector('.modal-window--leaderboard')\n        hideModalWindow();\n        showModalWindow();\n        initModalEvents();\n    });\n    \n    openEndModal?.addEventListener(\"click\", function () {\n        modalWindow = document.querySelector('.modal-window--game_end')\n        hideModalWindow();\n        showModalWindow();\n        initModalEvents();\n    });\n\n    const initModalEvents = () =>{\n        modalWindow.addEventListener(\n            \"click\",\n            function (event) {\n                if (\n                    event.target.matches(\".modal-btn\") ||\n                    !event.target.closest(\".modal-content\")\n                ) {\n                    hideModalWindow();\n                };\n            },\n            false \n        );\n    }\n    \n    function showModalWindow () {\n        document.body.style.overflow='hidden';\n        modalWindow.style.display='flex';\n\n    };\n    \n    function hideModalWindow () {\n        document.body.style.overflow='scroll';\n        modalWindow.style.display='none';\n    };\n};\n\n\n\n","import {renderLeaderboard} from './leaderboard'\n\nexport function startTimer(duration, display) {\n    let timer = duration;\n    let minutes;\n    let seconds;\n\n    setInterval(function () {\n        minutes = parseInt(timer / 60, 10)\n        seconds = parseInt(timer % 60, 10);\n\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n        display.textContent = minutes + \":\" + seconds;\n        if (--timer < 0) {\n            document.body.style.overflow='hidden';\n            document.querySelector('.modal-window--game_end').style.display='flex';\n            document.querySelector('.modal-header--end').innerText = `time's up!`\n            timer = 0\n            const results = JSON.parse(localStorage.getItem('inputData'))\n            let storagePlayers = JSON.parse(localStorage.getItem('storagePlayers'))\n            if(storagePlayers){\n                storagePlayers.push(results)\n                localStorage.setItem('storagePlayers', JSON.stringify(storagePlayers))\n            } else {\n                storagePlayers = []\n                storagePlayers.push(results)\n                localStorage.setItem('storagePlayers', JSON.stringify(storagePlayers))\n            }\n            renderLeaderboard()\n            clearInterval(1)\n        }\n        \n    }, 1000);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { startTimer } from './timer';\nimport { initModalToggling } from './modal'\nimport {renderLeaderboard} from './leaderboard'\n\nexport const game = () => {\n    const firstNum = document.querySelector('.num-1')\n    const secondNum = document.querySelector('.num-2')\n    const operator = document.querySelector('.operator')\n    const answer = document.querySelector('.answer')\n    const form = document.querySelector('.gameplay-form')\n    const score = document.querySelector('.score')\n    const add = document.querySelector('.add')\n    const substract = document.querySelector('.substract')\n    const problemContainer = document.querySelector('.game')\n    const inputData = JSON.parse(localStorage.getItem('inputData'));\n    const stopBttn = document.querySelector('.bttn--stop')\n    document.querySelector('.user-greet').innerText = `Have fun, ${inputData.name.replace(/\\\"/g, \"\")}!`;\n\n    if (!inputData) return;\n\n    stopBttn.addEventListener('click', () => {\n        const results = JSON.parse(localStorage.getItem('inputData'))\n        let storagePlayers = JSON.parse(localStorage.getItem('storagePlayers'))\n\n        if (storagePlayers) {\n            storagePlayers.push(results)\n            localStorage.setItem('storagePlayers', JSON.stringify(storagePlayers))\n        } else {\n            storagePlayers = []\n            storagePlayers.push(results)\n            localStorage.setItem('storagePlayers', JSON.stringify(storagePlayers))\n        }\n        renderLeaderboard()\n    })\n\n    const changeMode = () => {\n        if (inputData.mode == 'time') {\n            window.onload = function () {\n                const time = 90,\n                display = document.querySelector('#time');\n                startTimer(time, display);\n            };\n\n            document.querySelector('.game-mode').innerText = 'time attack'        \n            document.querySelector('.timer').style = 'display: block;'        \n        }\n    }\n    changeMode()\n\n    function getRandom(min, max) {\n        min = Math.ceil(min)\n        max = Math.floor(max)\n        return Math.floor(Math.random() * (max - min + 1)) + min\n    }\n\n    const operators = ['+', '-', '*', '/']\n\n    const calculate = (a, b, operator) => {\n        switch (operator) {\n            case '+':\n            return a + b\n            case '-':\n            return a - b\n            case '/':\n            return a / b\n            case '*':\n            return a * b\n        }\n    }\n\n    const getRandoms = () => {\n        const firstNum = getRandom(1, 10 * level)\n        const secondNum = getRandom(1, 10 * level)\n        const operator = operators[getRandom(0, 3)]\n\n        if (operator === '/') {\n            if (firstNum % secondNum !== 0) {\n                return getRandoms()\n            }\n        }\n\n        const answer = calculate(firstNum, secondNum, operator)\n        return { firstNum, secondNum, operator, answer }\n    }\n\n    const renderProblem = (data) => {\n        firstNum.textContent = data.firstNum\n        secondNum.textContent = data.secondNum\n        operator.textContent = data.operator\n    }\n\n    let level = 1\n    let inARow = 0\n    let totalCorrect = 0\n    let totalIncorrect = 0\n    let counter = 0\n    let problem = getRandoms()\n    renderProblem(problem)\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if (!answer.value) return\n        if (Number(answer.value) === Number(problem.answer)) {\n            counter += 1\n            totalCorrect += 1\n            inARow += 1\n            add.classList.add(\"fade-animation\")\n            setTimeout(function() {\n                add.classList.remove('fade-animation')\n            },1000)\n            if(inARow == 5){\n                level += 1\n                inARow = 0\n            }\n        } else {\n            counter -= 1\n            totalIncorrect += 1\n            document.querySelector('.score-wrapper').classList.add('shake-animation')\n            substract.classList.add('fade-animation')\n            setTimeout(function() {\n                document.querySelector('.score-wrapper').classList.remove('shake-animation')\n                substract.classList.remove('fade-animation')\n            },1000)\n            inARow = 0\n        }\n\n        problemContainer.classList.remove('animationfr')\n        problemContainer.classList.add('animation')\n        setTimeout(function() {\n            problem = getRandoms()\n            renderProblem(problem)\n            problemContainer.classList.remove('animation')\n            problemContainer.classList.add('animationfr')\n        },400)\n\n        score.textContent = counter\n        inputData.score = counter\n        answer.value = ''\n\n        document.querySelector('.total-correct').innerText = totalCorrect\n        document.querySelector('.total-incorrect').innerText = totalIncorrect\n        document.querySelector('.score-num').innerText = counter\n        document.querySelector('.game-level').innerText = level\n        \n        localStorage.setItem('inputData', JSON.stringify(inputData));        \n    }\n    form.addEventListener('submit', onSubmit)\n}\n\ninitModalToggling()\ngame()\n\n"],"names":[],"sourceRoot":""}